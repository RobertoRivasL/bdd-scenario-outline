package com.curso.automatizacion.steps;

import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.es.Dado;
import io.cucumber.java.es.Cuando;
import io.cucumber.java.es.Entonces;
import io.cucumber.java.es.Y;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.By;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import io.github.bonigarcia.wdm.WebDriverManager;

import java.time.Duration;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Step Definitions para las pruebas de la Calculadora
 * Curso de Automatización de Pruebas - Scenario Outline Demo
 */
public class CalculadoraSteps {

    private WebDriver driver;
    private WebDriverWait wait;
    private String rutaAplicacion;

    @Before
    public void setUp() {
        // Configuración automática del WebDriver
        WebDriverManager.chromedriver().setup();
        
        ChromeOptions options = new ChromeOptions();
        
        // Configuración para CI/CD si es necesario
        if (Boolean.parseBoolean(System.getProperty("webdriver.headless", "false"))) {
            options.addArguments("--headless");
        }
        
        options.addArguments("--no-sandbox");
        options.addArguments("--disable-dev-shm-usage");
        options.addArguments("--window-size=1920,1080");
        options.addArguments("--disable-gpu");
        
        driver = new ChromeDriver(options);
        wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        
        // Ruta al archivo HTML
        rutaAplicacion = "file://" + System.getProperty("user.dir") + "/src/test/resources/calculadora.html";
    }

    @After
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }

    @Dado("que estoy en la página de la calculadora")
    public void queEstoyEnLaPaginaDeLaCalculadora() {
        driver.get(rutaAplicacion);
        
        // Verificar que la página se cargó correctamente
        WebElement titulo = wait.until(
            ExpectedConditions.presenceOfElementLocated(By.tagName("h1"))
        );
        assertTrue(titulo.getText().contains("Calculadora"));
    }

    @Dado("que he realizado una operación")
    public void queHeRealizadoUnaOperacion() {
        ingresarNumero("numero1", "10");
        ingresarNumero("numero2", "5");
        hacerClicEnBoton("suma");
    }

    @Cuando("ingreso el primer número {int}")
    public void ingresoElPrimerNumero(Integer numero) {
        ingresarNumero("numero1", numero.toString());
    }

    @Cuando("ingreso el primer número {double}")
    public void ingresoElPrimerNumero(Double numero) {
        ingresarNumero("numero1", numero.toString());
    }

    @Cuando("ingreso el segundo número {int}")
    public void ingresoElSegundoNumero(Integer numero) {
        ingresarNumero("numero2", numero.toString());
    }

    @Cuando("ingreso el segundo número {double}")
    public void ingresoElSegundoNumero(Double numero) {
        ingresarNumero("numero2", numero.toString());
    }

    @Cuando("hago clic en el botón de {word}")
    public void hagoClicEnElBotonDe(String operacion) {
        hacerClicEnBoton(operacion);
    }

    @Cuando("hago clic en el botón {string}")
    public void hagoClicEnElBoton(String nombreBoton) {
        switch (nombreBoton.toLowerCase()) {
            case "limpiar":
                hacerClicEnBoton("limpiar");
                break;
            default:
                throw new IllegalArgumentException("Botón no reconocido: " + nombreBoton);
        }
    }

    @Entonces("el resultado debe ser {int}")
    public void elResultadoDebeSer(Integer resultadoEsperado) {
        WebElement resultado = wait.until(
            ExpectedConditions.presenceOfElementLocated(
                By.cssSelector("[data-testid='resultado-valor']")
            )
        );
        
        String textoResultado = resultado.getText();
        assertFalse(textoResultado.contains("Error"), "No debería haber error en el resultado");
        
        double resultadoReal = Double.parseDouble(textoResultado);
        assertEquals(resultadoEsperado.doubleValue(), resultadoReal, 0.01);
    }

    @Entonces("el resultado debe ser aproximadamente {double}")
    public void elResultadoDebeSerAproximadamente(Double resultadoEsperado) {
        WebElement resultado = wait.until(
            ExpectedConditions.presenceOfElementLocated(
                By.cssSelector("[data-testid='resultado-valor']")
            )
        );
        
        String textoResultado = resultado.getText();
        double resultadoReal = Double.parseDouble(textoResultado);
        assertEquals(resultadoEsperado, resultadoReal, 0.1);
    }

    @Y("la operación mostrada debe contener {string}")
    public void laOperacionMostradaDebeContener(String expresionEsperada) {
        WebElement operacion = wait.until(
            ExpectedConditions.presenceOfElementLocated(
                By.cssSelector("[data-testid='resultado-operacion']")
            )
        );
        
        String textoOperacion = operacion.getText();
        assertTrue(textoOperacion.contains(expresionEsperada), 
            "La operación '" + textoOperacion + "' debería contener '" + expresionEsperada + "'");
    }

    @Entonces("debe mostrar el mensaje de error {string}")
    public void debeMostrarElMensajeDeError(String mensajeEsperado) {
        WebElement resultado = wait.until(
            ExpectedConditions.presenceOfElementLocated(
                By.cssSelector("[data-testid='resultado-valor']")
            )
        );
        
        String textoResultado = resultado.getText();
        assertEquals(mensajeEsperado, textoResultado);
    }

    @Entonces("los campos de entrada deben estar vacíos")
    public void losCamposDeEntradaDebenEstarVacios() {
        WebElement numero1 = driver.findElement(By.cssSelector("[data-testid='numero1']"));
        WebElement numero2 = driver.findElement(By.cssSelector("[data-testid='numero2']"));
        
        assertEquals("", numero1.getAttribute("value"), "El primer número debería estar vacío");
        assertEquals("", numero2.getAttribute("value"), "El segundo número debería estar vacío");
    }

    @Y("el resultado debe mostrar {string}")
    public void elResultadoDebeMostrar(String textoEsperado) {
        WebElement resultado = wait.until(
            ExpectedConditions.presenceOfElementLocated(
                By.cssSelector("[data-testid='resultado-valor']")
            )
        );
        
        assertEquals(textoEsperado, resultado.getText());
    }

    @Y("la operación debe mostrar {string}")
    public void laOperacionDebeMostrar(String textoEsperado) {
        WebElement operacion = wait.until(
            ExpectedConditions.presenceOfElementLocated(
                By.cssSelector("[data-testid='resultado-operacion']")
            )
        );
        
        assertEquals(textoEsperado, operacion.getText());
    }

    // Métodos auxiliares privados
    private void ingresarNumero(String campo, String valor) {
        WebElement elemento = wait.until(
            ExpectedConditions.presenceOfElementLocated(
                By.cssSelector("[data-testid='" + campo + "']")
            )
        );
        elemento.clear();
        elemento.sendKeys(valor);
    }

    private void hacerClicEnBoton(String operacion) {
        String dataTestId = mapearOperacionATestId(operacion);
        
        WebElement boton = wait.until(
            ExpectedConditions.elementToBeClickable(
                By.cssSelector("[data-testid='" + dataTestId + "']")
            )
        );
        boton.click();
        
        // Esperar un momento para que se procese la acción
        try {
            Thread.sleep(300);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    private String mapearOperacionATestId(String operacion) {
        switch (operacion.toLowerCase()) {
            case "suma": return "btn-suma";
            case "resta": return "btn-resta";
            case "multiplicacion": return "btn-multiplicacion";
            case "division": return "btn-division";
            case "limpiar": return "btn-limpiar";
            default:
                throw new IllegalArgumentException("Operación no reconocida: " + operacion);
        }
    }
}
